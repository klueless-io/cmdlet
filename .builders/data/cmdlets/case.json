{
  "category_key": "case",
  "cmdlets": [
    {
      "name": "back_slash",
      "aliases": [
        "backward_slash",
        "slash_backward"
      ],
      "name_and_aliases": [

      ],
      "description": "Convert to back slash notation",
      "result": "value converted to back_slash case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, preserve_case: true, separator: '\\\\')\n"
    },
    {
      "name": "camel",
      "aliases": [
        "camel_upper",
        "camelUpper",
        "camelU",
        "pascalcase"
      ],
      "name_and_aliases": [

      ],
      "description": "Camel case the characters in the given 'string'",
      "result": "value converted to camel case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value).underscore.camelize\n"
    },
    {
      "name": "constant",
      "aliases": [
        "constantize"
      ],
      "name_and_aliases": [

      ],
      "description": "Constant case the characters in the given 'string'",
      "result": "value converted to constant case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, separator: '_').upcase\n"
    },
    {
      "name": "dash",
      "aliases": [
        "dasherize",
        "dashify",
        "dashcase",
        "hyphenate"
      ],
      "name_and_aliases": [

      ],
      "description": "Dash case the characters in the given 'string'",
      "result": "value converted to dash case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value)\n"
    },
    {
      "name": "dot",
      "aliases": [
        "dotirize",
        "dotify",
        "dotcase",
        "hyphenate"
      ],
      "name_and_aliases": [

      ],
      "description": "Dot case the characters in the given 'string'",
      "result": "value converted to dot case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, separator: '.')\n"
    },
    {
      "name": "double_colon",
      "aliases": [

      ],
      "name_and_aliases": [

      ],
      "description": "Double colon case the characters in the given 'string'",
      "result": "value converted to double_colon case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, preserve_case: true, separator: '::')\n"
    },
    {
      "name": "human",
      "aliases": [
        "humanize",
        "sentence"
      ],
      "name_and_aliases": [

      ],
      "description": "Human case the characters in the given 'string'",
      "result": "value converted to human case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value,\n            separator: ' ',\n            preserve_case: true,\n            compress_prefix_numerals: false,\n            compress_suffix_numerals: false).humanize\n"
    },
    {
      "name": "lamel",
      "aliases": [
        "camel_lower",
        "camelLower",
        "camelL"
      ],
      "name_and_aliases": [

      ],
      "description": "Lower camel case the characters in the given 'string'",
      "result": "value converted to lower camel case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, separator: '_').camelize(:lower)\n"
    },
    {
      "name": "lower",
      "aliases": [
        "lowercase",
        "downcase"
      ],
      "name_and_aliases": [

      ],
      "description": "Lower case the characters in the given 'string'",
      "result": "value converted to lower case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          return '' if value.nil?\n\n          value.downcase\n"
    },
    {
      "name": "slash",
      "aliases": [
        "forward_slash",
        "slash_forward"
      ],
      "name_and_aliases": [

      ],
      "description": "Slash case the characters in the given 'string'",
      "result": "value converted to slash case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, preserve_case: true, separator: '/')\n"
    },
    {
      "name": "snake",
      "aliases": [

      ],
      "name_and_aliases": [

      ],
      "description": "Snake case the characters in the given 'string'",
      "result": "value converted to snake case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          tokenizer.parse(value, separator: '_', forced_separator: true)\n"
    },
    {
      "name": "title",
      "aliases": [

      ],
      "name_and_aliases": [

      ],
      "description": "Title case the characters in the given 'string'",
      "result": "value converted to title case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "        tokenizer.parse(value,\n          separator: ' ',\n          preserve_case: true,\n          compress_prefix_numerals: false,\n          compress_suffix_numerals: false)\n        .titleize\n"
    },
    {
      "name": "upper",
      "aliases": [
        "upcase",
        "uppercase"
      ],
      "name_and_aliases": [

      ],
      "description": "Upper case the characters in the given 'string'",
      "result": "value converted to upper case",
      "category": "case",
      "category_description": "Tokenize and apply case and/or separator",
      "base_class_require": null,
      "base_class": null,
      "parameters": [
        {
          "name": "value",
          "description": "value - to be converted",
          "splat": null,
          "default": null,
          "param_type": "String|Int"
        }
      ],
      "examples": [

      ],
      "ruby": "          return '' if value.nil?\n\n          value.upcase\n"
    }
  ]
}